@page "/fetchdata"
@using BlazorTrades.Data
@using System.Reactive.Linq
@implements IDisposable
@inject TradingService TradingService

<PageTitle>Market Data</PageTitle>

<h2>Simulated trading view</h2>

@if (_stocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Position</th>
                <th>Ticker</th>
                <th>Spot Price</th>
                <th>Qty [T - 1]</th>
                <th>Qty [T - 0]</th>
                <th>Qty Change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in _stocks)
            {
                <tr>
                    <td>@stock.Model.Position</td>
                    <td>@stock.Model.Ticker</td>
                    <td>@stock.Model.SpotPrice</td>
                    <td>@stock.Model.Qty1</td>
                    <td>@stock.Model.Qty0</td>
                    <td>@stock.Model.QtyDelta</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool _disposed = false;
    private IEnumerable<StockMarketViewModel>? _stocks;
    private List<IDisposable> _subscriptions = new();

    protected override async Task OnInitializedAsync()
    {
        _stocks = await TradingService.GetStockAsync();
        
        foreach (var stock in _stocks!)
        {
            var disposable = Observable.FromEvent(
                h => stock.StateUpdated += h,
                h => stock.StateUpdated -= h)
                .Throttle(TimeSpan.FromMilliseconds(200))
                .Subscribe(_ => InvokeAsync(StateHasChanged).ConfigureAwait(false));
            
            _subscriptions.Add(disposable);
        }
    }

    public void Dispose() => Dispose(true);

    private void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }

        if (disposing)
        {
            foreach (var stock in _stocks!)
            {
                stock.Dispose();
            }

            foreach (var subscription in _subscriptions)
            {
                subscription.Dispose();
            }
        }

        _disposed = true;
    }
}
